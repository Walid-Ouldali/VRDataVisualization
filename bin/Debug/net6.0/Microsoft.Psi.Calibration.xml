<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Psi.Calibration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Psi.Calibration.CalibrationExtensions">
            <summary>
            Provides various helper and extension methods for calibrating cameras, dealing with calibration objects, camera intrinsics, rotations, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.CalibrateCameraIntrinsics(System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point3D},System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point2D},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double}@,MathNet.Numerics.LinearAlgebra.Vector{System.Double}@,System.Boolean)">
            <summary>
            Estimate a camera's camera matrix and distortion coefficients, given a set of image points and
            corresponding 3d camera points. The underlying calibration procedure utilizes Levenberg Marquardt
            optimization to produce these estimates.
            </summary>
            <param name="cameraPoints">3d positions of the points in camera coordinates.
            These points are *not* yet in the typically assumed \psi basis (X=Forward, Y=Left, Z=Up).
            Instead, we assume that X and Y correspond to directions in the image plane, and Z corresponds to depth in the plane.</param>
            <param name="imagePoints">2d positions of the points in the image.</param>
            <param name="initialCameraMatrix">Initial estimate of the camera matrix.</param>
            <param name="initialDistortionCoefficients">Initial estimate of distortion coefficients.</param>
            <param name="cameraMatrix">Estimated output camera matrix.</param>
            <param name="distortionCoefficients">Estimated output distortion coefficients.</param>
            <param name="silent">If false, print debugging information to the console.</param>
            <returns>The RMS (root mean squared) error of this computation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.CalibrateCameraIntrinsicsAndExtrinsics(System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point3D},System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point2D},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double}@,MathNet.Numerics.LinearAlgebra.Vector{System.Double}@,MathNet.Numerics.LinearAlgebra.Vector{System.Double}@,MathNet.Numerics.LinearAlgebra.Vector{System.Double}@,System.Boolean)">
            <summary>
            Estimate a camera's intrinsics (camera matrix + distortion coefficients) and extrinsics (rotation + translation)
            given a set of image points and corresponding 3d world points. The underlying calibration procedure utilizes
            Levenberg Marquardt optimization to produce these estimates.
            </summary>
            <param name="worldPoints">3d positions of the points in world coordinates.
            These points are *not* yet in the typically assumed \psi basis (X=Forward, Y=Left, Z=Up).
            Instead, we assume that X and Y correspond to directions in the image plane, and Z corresponds to depth in the plane.</param>
            <param name="imagePoints">2d positions of the points in the image.</param>
            <param name="initialCameraMatrix">Initial estimate of the camera matrix.</param>
            <param name="initialDistortionCoefficients">Initial estimate of distortion coefficients.</param>
            <param name="cameraMatrix">Estimated output camera matrix.</param>
            <param name="distortionCoefficients">Estimated output distortion coefficients.</param>
            <param name="rotation">Estimated camera rotation.</param>
            <param name="translation">Estimated camera translation.</param>
            <param name="silent">If false, print debugging information to the console.</param>
            <returns>The RMS (root mean squared) error of this computation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.CreateCameraIntrinsics(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Construct a new <see cref="T:Microsoft.Psi.Calibration.ICameraIntrinsics"/> object
            computed from image width/height and focal length.
            </summary>
            <param name="imageWidth">The image width.</param>
            <param name="imageHeight">The image height.</param>
            <param name="focalLengthX">The focal length in the X dimension.</param>
            <param name="focalLengthY">The focal length in the Y dimension.</param>
            <returns>A newly computed <see cref="T:Microsoft.Psi.Calibration.ICameraIntrinsics"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.CreateCameraIntrinsics(Microsoft.Psi.Imaging.ImageBase,System.Double,System.Double)">
            <summary>
            Construct a new <see cref="T:Microsoft.Psi.Calibration.ICameraIntrinsics"/> object
            computed from an image (width and height) and focal length.
            </summary>
            <param name="image">The image to construct the intrinsics for.</param>
            <param name="focalLengthX">The focal length in the X dimension.</param>
            <param name="focalLengthY">The focal length in the Y dimension.</param>
            <returns>A newly computed <see cref="T:Microsoft.Psi.Calibration.ICameraIntrinsics"/>.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.ProjectToCameraSpace(Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo,MathNet.Spatial.Euclidean.Point2D,Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage})">
            <summary>
            Method for projecting a point in pixel coordinate from the color camera into the depth camera's coordinates by determining the corresponding depth pixel.
            </summary>
            <param name="depthDeviceCalibrationInfo">Defines the calibration information (extrinsics and intrinsics) for the depth device.</param>
            <param name="point2D">Pixel coordinates in the color camera.</param>
            <param name="depthImage">Depth map.</param>
            <returns>Point in 3D depth camera coordinates, assuming MathNet basis (Forward=X, Left=Y, Up=Z).</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.ProjectTo3D(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point2D},Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo}},Microsoft.Psi.DeliveryPolicy{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point2D},Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo}},System.String)">
            <summary>
            Projects set of 2D image points into 3D.
            </summary>
            <param name="source">Tuple of depth image, list of points to project, and calibration information.</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <param name="name">An optional name for the stream operator.</param>
            <returns>Returns a producer that generates a list of corresponding 3D points in Kinect camera space.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.AxisAngleToMatrix(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Use the Rodrigues formula for transforming a given rotation from axis-angle representation to a 3x3 matrix.
            Where 'r' is a rotation vector:
            theta = norm(r)
            M = skew(r/theta)
            R = I + M * sin(theta) + M*M * (1-cos(theta)).
            </summary>
            <param name="vectorRotation">Rotation in axis-angle vector representation,
            where the angle is represented by the length (L2-norm) of the vector.</param>
            <returns>Rotation in a 3x3 matrix representation.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.MatrixToAxisAngle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Nullable{MathNet.Spatial.Units.Angle})">
            <summary>
            Convert a rotation matrix to axis-angle representation (a unit vector scaled by the angular distance in radians to rotate).
            </summary>
            <param name="m">Input rotation matrix.</param>
            <param name="epsilon">An optional angle epsilon parameter used to determine when the specified matrix contains a zero-rotation (by default 0.01 degrees).</param>
            <returns>Same rotation in axis-angle representation (L2-Norm of the vector represents angular distance in radians).</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.Project(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point2D@)">
            <summary>
            Project a 3D point (x, y, z) into a camera space (u, v) given the camera matrix and distortion coefficients.
            The 3D point is *not* yet in the typically assumed \psi basis (X=Forward, Y=Left, Z=Up).
            Instead, X and Y correspond to the image plane X and Y directions, with Z as depth.
            </summary>
            <param name="cameraMatrix">The camera matrix.</param>
            <param name="distCoeffs">The distortion coefficients of the camera.</param>
            <param name="point">Input 3D point (X and Y correspond to image dimensions, with Z as depth).</param>
            <param name="projectedPoint">Projected 2D point (output).</param>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CalibrationExtensions.ComputeRayIntersection(Microsoft.Psi.Imaging.DepthImage,Microsoft.Psi.Calibration.ICameraIntrinsics,MathNet.Spatial.Euclidean.Ray3D,System.Double,System.Double,System.Boolean)">
            <summary>
            Computes a ray intersection with a depth image mesh.
            </summary>
            <param name="depthImage">Depth image mesh to ray cast against.</param>
            <param name="depthIntrinsics">The intrinsics for the depth camera.</param>
            <param name="ray">Ray to intersect against depth image mesh.</param>
            <param name="maxDistance">The maximum distance to search for (default is 5 meters).</param>
            <param name="skipFactor">Distance to march on each step along ray (default is 5 cm).</param>
            <param name="undistort">Whether undistortion should be applied to the point.</param>
            <returns>Returns point of intersection, or null if no intersection was found.</returns>
            <remarks>
            The ray is assumed to be defined relative to the pose of the depth camera,
            i.e., (0, 0, 0) is the position of the camera itself.
            </remarks>
        </member>
        <member name="T:Microsoft.Psi.Calibration.CameraIntrinsics">
            <summary>
            CameraIntrinsics defines the intrinsic properties for a given camera.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.#ctor(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.CameraIntrinsics"/> class.
            </summary>
            <param name="imageWidth">The width of the image.</param>
            <param name="imageHeight">The height of the image.</param>
            <param name="transform">The 3x3 intrinsics transform matrix.</param>
            <param name="radialDistortion">The radial distortion parameters (up to 6).</param>
            <param name="tangentialDistortion">The tangential distortion parameters (up to 2).</param>
            <param name="closedFormDistorts">Indicates which direction the closed form equation for Brown-Conrady Distortion model goes. I.e. does it perform distortion or undistortion. Default is to distort (thus making projection simpler and unprojection more complicated).</param>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.RadialDistortion">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.TangentialDistortion">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.InvTransform">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.FocalLength">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.FocalLengthXY">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.PrincipalPoint">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.ClosedFormDistorts">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.ImageWidth">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.CameraIntrinsics.ImageHeight">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.op_Equality(Microsoft.Psi.Calibration.CameraIntrinsics,Microsoft.Psi.Calibration.CameraIntrinsics)">
            <summary>
            Returns a value indicating whether the specified camera intrinsics are the same.
            </summary>
            <param name="left">The first camera intrinsics.</param>
            <param name="right">The second camera intrinsics.</param>
            <returns>True if the camera intrinsics are the same; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.op_Inequality(Microsoft.Psi.Calibration.CameraIntrinsics,Microsoft.Psi.Calibration.CameraIntrinsics)">
            <summary>
            Returns a value indicating whether the specified camera intrinsics are different.
            </summary>
            <param name="left">The first camera intrinsics.</param>
            <param name="right">The second camera intrinsics.</param>
            <returns>True if camera intrinsics are different; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.GetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.TryGetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean,MathNet.Spatial.Euclidean.Point2D@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.GetCameraSpacePosition(MathNet.Spatial.Euclidean.Point2D,System.Double,Microsoft.Psi.Imaging.DepthValueSemantics,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.TryUndistortPoint(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.TryDistortPoint(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.GetPixelToCameraSpaceMapping(Microsoft.Psi.Imaging.DepthValueSemantics,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.Equals(Microsoft.Psi.Calibration.ICameraIntrinsics)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.CameraIntrinsics.Equals(Microsoft.Psi.Calibration.CameraIntrinsics)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo">
            <summary>
            Defines the calibration information (intrinsics and extrinsics of color and depth cameras) for a depth device.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.Default">
            <summary>
            The default calibration info.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.#ctor(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo"/> class.
            </summary>
            <param name="colorWidth">Width of color camera in pixels.</param>
            <param name="colorHeight">Height of color camera in pixels.</param>
            <param name="colorTransform">Transform to be applied to color image.</param>
            <param name="colorRadialDistortionCoefficients">Color sensor's radial distortion coefficients (k1-k6).</param>
            <param name="colorTangentialDistortionCoefficients">Color sensor's tangential distortion coefficients (p1-p2).</param>
            <param name="depthToColorTransform">Transform from depth to color camera.</param>
            <param name="depthWidth">Width of depth image in pixels.</param>
            <param name="depthHeight">Height of depth image in pixels.</param>
            <param name="depthTransform">Transform to be applied to depth image.</param>
            <param name="depthRadialDistortionCoefficients">Depth sensor's radial distortion coefficients (k1-k6).</param>
            <param name="depthTangentialDistortionCoefficients">Depth sensor's tangential distortion coefficients (p1-p2).</param>
            <param name="depthExtrinsics">Depth extrinsics transform.</param>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.ColorExtrinsics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.ColorPose">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.ColorIntrinsics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.DepthExtrinsics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.DepthPose">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.DepthIntrinsics">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.GetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Psi.Calibration.DepthDeviceCalibrationInfo.TryGetPixelPosition(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point2D@,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Psi.Calibration.ICameraIntrinsics">
            <summary>
            ICameraIntrinsics defines our interface for specifying the intrinsics
            for a camera (i.e. converting from camera space coordinates into pixel
            coordinates).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.Transform">
            <summary>
            Gets the intrinsics matrix. This transform converts camera coordinates (in the camera's local space) into
            normalized device coordinates (NDC) ranging from -1 .. +1.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.InvTransform">
            <summary>
            Gets the inverse of instrinsics matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.RadialDistortion">
            <summary>
            Gets the radial distortion parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.TangentialDistortion">
            <summary>
            Gets the tangential distortion parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.FocalLength">
            <summary>
            Gets the focal length (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.FocalLengthXY">
            <summary>
            Gets or the focal length separated in X and Y (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.PrincipalPoint">
            <summary>
            Gets the principal point (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.ClosedFormDistorts">
            <summary>
            Gets a value indicating whether the closed form equation of the Brown-Conrady Distortion model
            distorts or undistorts. i.e. if true then:
                 Xdistorted = Xundistorted * (1+K1*R2+K2*R3+...
            otherwise:
                 Xundistorted = Xdistorted * (1+K1*R2+K2*R3+...
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.ImageWidth">
            <summary>
            Gets the width of the camera's image (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.ICameraIntrinsics.ImageHeight">
            <summary>
            Gets the height of the camera's image (in pixels).
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.GetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean,System.Boolean)">
            <summary>
            Gets the corresponding pixel position for a point in 3D space.
            </summary>
            <param name="point3D">Point in 3D space, assuming MathNet basis (Forward=X, Left=Y, Up=Z).</param>
            <param name="distort">Indicates whether to apply distortion.</param>
            <param name="nullIfOutsideFieldOfView">Optional flag indicating whether to return null if point is outside the field of view (default true).</param>
            <returns>Point containing the pixel position.</returns>
            <remarks>Points that are behind the camera, i.e., with the X value below zero lead to null returns,
            regardless of value of the <paramref name="nullIfOutsideFieldOfView"/> parameter.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.TryGetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean,MathNet.Spatial.Euclidean.Point2D@,System.Boolean)">
            <summary>
            Gets the corresponding pixel position for a point in 3D space.
            </summary>
            <param name="point3D">Point in 3D space, assuming MathNet basis (Forward=X, Left=Y, Up=Z).</param>
            <param name="distort">Indicates whether to apply distortion.</param>
            <param name="pixelPosition">Output point containing the pixel position.</param>
            <param name="nullIfOutsideFieldOfView">Optional flag indicating whether to return null if point is outside the field of view (default true).</param>
            <returns>True if <paramref name="pixelPosition"/> is within field of view, otherwise false.</returns>
            <remarks>Points that are behind the camera, i.e., with the X value below zero lead to a return value of false,
            regardless of value of the <paramref name="nullIfOutsideFieldOfView"/> parameter.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.GetCameraSpacePosition(MathNet.Spatial.Euclidean.Point2D,System.Double,Microsoft.Psi.Imaging.DepthValueSemantics,System.Boolean)">
            <summary>
            Gets the corresponding 3D camera space position at a given depth along a specified pixel.
            </summary>
            <param name="point2D">The pixel position.</param>
            <param name="depth">The depth along the specified pixel position.</param>
            <param name="depthValueSemantics">How depth values should be interpreted.</param>
            <param name="undistort">Indicates whether to apply undistortion.</param>
            <returns>Point in 3D space, assuming MathNet basis (Forward=X, Left=Y, Up=Z).</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.GetPixelToCameraSpaceMapping(Microsoft.Psi.Imaging.DepthValueSemantics,System.Boolean)">
            <summary>
            Gets a mapping matrix that can be used to transform pixels into 3D space.
            </summary>
            <param name="depthValueSemantics">How depth values should be interpreted.</param>
            <param name="undistort">Indicates whether to apply undistortion.</param>
            <returns>
            A matrix of 3D points that can be used to transform depth values at a specified pixel
            into 3D space. To use this matrix simply piecewise multiply the depth value by the X
            Y and Z dimensions of the <see cref="T:MathNet.Spatial.Euclidean.Point3D"/> in the matrix at the location indexed
            by the pixel.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.TryDistortPoint(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D@)">
             <summary>
             Applies the distortion model to a point in the camera post-projection coordinates.
            
             The undistortion is defined by the following equations:
               Xu = Xd (1 + K0 * r^2 + K1 * r^4) + T1 * (r^2 + 2Xd^2) + T0 * 2 * XdYd
               Yu = Yd (1 + K0 * r^2 + K1 * r^4) + T0 * (r^2 + 2Yd^2) + T1 * 2 * XdYd
             where:
                Xd,Yd - distorted point's coordinates
                Xu,Yu - undistorted point's coordinates
                K0,K1 - radial distortion coefficients
                T0,T1 - tangential distortion coefficients
                r - sqrt(Xd*Xd+Yd*Yd)
            
             Newton's method is used to find the inverse of this. That is
                         Xd(n+1) = Xd(n) + J^-1 * F(Xd,Yd).
             </summary>
             <param name="undistortedPoint">The undistorted point in camera post-projection coordinates.</param>
             <param name="distortedPoint">The distorted point.</param>
             <returns>True if <paramref name="distortedPoint"></paramref> contains the distorted point, or false if the algorithm did not converge.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ICameraIntrinsics.TryUndistortPoint(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D@)">
             <summary>
             Applies the camera's radial and tangential undistortion to the specified (distorted) point.
            
             The undistortion is defined by the following equations:
               Xu = Xd (1 + K0 * r^2 + K1 * r^4) + T1 * (r^2 + 2Xd^2) + T0 * 2 * XdYd
               Yu = Yd (1 + K0 * r^2 + K1 * r^4) + T0 * (r^2 + 2Yd^2) + T1 * 2 * XdYd
             where:
                Xd,Yd - distorted point's coordinates
                Xu,Yu - undistorted point's coordinates
                K0,K1 - radial distortion coefficients
                T0,T1 - tangential distortion coefficients.
            
             </summary>
             <param name="distortedPoint">Distorted point in camera post-projection coordinates.</param>
             <param name="undistortedPoint">Returns the undistorted point in camera post-projection coordinates.</param>
             <returns>True if <paramref name="undistortedPoint"/> contains the undistorted point, or false if the algorithm did not converge.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo">
            <summary>
            Defines the calibration information (intrinsics and extrinsics of color and depth cameras) for a depth device.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.ColorExtrinsics">
            <summary>
            Gets the extrinsics associated with the color camera, which describes how to transform points in world coordinates to color camera coordinates (world => camera).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.ColorPose">
            <summary>
            Gets the pose of the color camera in the world, which is obtained by inverting the extrinsics matrix (camera => world).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.ColorIntrinsics">
            <summary>
            Gets the intrinsics associated with the color camera.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.DepthExtrinsics">
            <summary>
            Gets the extrinsics associated with the depth camera, which describes how to transform points in world coordinates to depth camera coordinates (world => camera).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.DepthPose">
            <summary>
            Gets the pose of the depth camera in the world, which is obtained by inverting the extrinsics matrix (camera => world).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.DepthIntrinsics">
            <summary>
            Gets the intrinsics associated with the depth camera.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.GetPixelPosition(MathNet.Spatial.Euclidean.Point3D,System.Boolean)">
            <summary>
            Converts a 3D point from depth camera coordinates into color image coordinates.
            </summary>
            <param name="point3D">The 3D point in depth camera coordinates.</param>
            <param name="nullIfOutsideFieldOfView">Optional flag indicating whether to return null if point is outside the field of view (default true).</param>
            <returns>The 2D point in color image space.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo.TryGetPixelPosition(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point2D@,System.Boolean)">
            <summary>
            Converts a 3D point from depth camera coordinates into color image coordinates.
            </summary>
            <param name="point3D">The 3D point in depth camera coordinates.</param>
            <param name="pixelPosition">Output point containing the pixel position.</param>
            <param name="nullIfOutsideFieldOfView">Optional flag indicating whether to return null if point is outside the field of view (default true).</param>
            <returns>True if <paramref name="pixelPosition"/> is within field of view, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.LevenbergMarquardt">
            <summary>
            Defines a class for performing Levenberg-Marquardt optimization.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.#ctor(Microsoft.Psi.Calibration.LevenbergMarquardt.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.LevenbergMarquardt"/> class.
            </summary>
            <param name="function">Cost function.</param>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.#ctor(Microsoft.Psi.Calibration.LevenbergMarquardt.Function,Microsoft.Psi.Calibration.LevenbergMarquardt.Jacobian)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.LevenbergMarquardt"/> class.
            </summary>
            <param name="function">Cost function.</param>
            <param name="jacobianFunction">Jacobian function.</param>
        </member>
        <member name="T:Microsoft.Psi.Calibration.LevenbergMarquardt.Function">
            <summary>
            y_i - f(x_i, parameters) as column vector.
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Matrix.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.LevenbergMarquardt.Jacobian">
            <summary>
            J_ij, ith error from function, jth parameter.
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Matrix.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.LevenbergMarquardt.States">
            <summary>
            States for optimization.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.LevenbergMarquardt.States.Running">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.LevenbergMarquardt.States.MaximumIterations">
            <summary>
            Maximum iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.LevenbergMarquardt.States.LambdaTooLarge">
            <summary>
            Lambda too large.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.LevenbergMarquardt.States.ReductionStepTooSmall">
            <summary>
            Reduction step too small.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.LevenbergMarquardt.RMSError">
            <summary>
            Gets the RMS error.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.LevenbergMarquardt.State">
            <summary>
            Gets the optimization state.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.Minimize(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Minimizes function.
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Returns the RMS.</returns>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.MinimizeOneStep(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Single step of the optimization.
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Returns the error.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.LevenbergMarquardt.NumericalDifferentiation">
            <summary>
            Class for doing numerical differentiation.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.NumericalDifferentiation.#ctor(Microsoft.Psi.Calibration.LevenbergMarquardt.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.LevenbergMarquardt.NumericalDifferentiation"/> class.
            </summary>
            <param name="function">Cost function.</param>
        </member>
        <member name="M:Microsoft.Psi.Calibration.LevenbergMarquardt.NumericalDifferentiation.Jacobian(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Returns the Jacobian
            J_ij, ith error from function, jth parameter.
            </summary>
            <param name="parameters">Parameters.</param>
            <returns>Returns Jacobian.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.MultiCameraCalibration">
            <summary>
            Used for serializing out the results of multi-camera calibration (a system of multiple cameras).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationMethod">
            <summary>
            Defines the method used to perform the calibration.
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationMethod.CheckerBoard">
            <summary>
            Indicates we used a checkerboard
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.MethodOfCalibration">
            <summary>
            Gets or sets the method of calibration used.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CheckerBoardWidth">
            <summary>
            Gets or sets the number of corners across the checker board.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CheckerBoardHeight">
            <summary>
            Gets or sets the number of corners down the checker board.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CheckerBoardSquareSize">
            <summary>
            Gets or sets the size of each square (in millimeters) on the checker board.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResults">
            <summary>
            Gets or sets the camera calibration for each camera.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.SolvedBoards">
            <summary>
            Gets or sets the solved board positions.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Calibration.MultiCameraCalibration.LoadFromFile(System.String)">
            <summary>
            Loads the system calibration from an xml file.
            </summary>
            <param name="xmlFileName">The path to the xml file containing the system calibration information.</param>
            <returns>The system calibration.</returns>
        </member>
        <member name="T:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult">
            <summary>
            Defines the calibration results for a single camera.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.CameraName">
            <summary>
            Gets or sets the name of the camera.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.MachineName">
            <summary>
            Gets or sets the name of the machine that was controlling this camera.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.SensorName">
            <summary>
            Gets or sets the name of the sensor (i.e. IR, Color, or Depth).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.SourceVideo">
            <summary>
            Gets or sets the path to the video store (for this camera) used for this calibration.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.Intrinsics">
            <summary>
            Gets or sets the camera intrinsics.
            Intrinsics defines a 3x3 matrix stored in column-major order and assumes column-vectors
            (i.e. Matrix * Point versus Point * Matrix).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.DistortionCoefficients">
            <summary>
            Gets or sets the camera distortion coefficients
            These coefficients are in the same order as openCV, i.e.
            k1,k2,p1,p2,[k3,[k4,k5,k6]]
            where k are the radial distortion coefficients and p are
            the tangential distortion coefficients.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.Extrinsics">
            <summary>
            Gets or sets the camera extrinsics.
            This array contains a 4x4 extrinsics matrix.
            Values are stored in column-major order and assumes column-vectors
            (i.e. Matrix * Point versus Point * Matrix).
            Units are millimeters.
            MathNet basis is asssumed here
                 Z ^  X
                   | /
                   |/
             Y ----+.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.IntrinsicsReprojectionError">
            <summary>
            Gets or sets the camera's intrinsics reprojection error.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.ExtrinsicsReprojectionError">
            <summary>
            Gets or sets the camera's extrinsics reprojection error.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.ImageWidth">
            <summary>
            Gets or sets the width of each captured image.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.ImageHeight">
            <summary>
            Gets or sets the height of each captured image.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.NumberOfFrames">
            <summary>
            Gets or sets the number of frames captured.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.CameraIntrinsics">
            <summary>
            Gets the camera's intrinsics.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CameraCalibrationResult.Pose">
            <summary>
            Gets the camera's pose. The pose is used to convert from device=>world coordinates
            (i.e. given 0,0,0 it will tell you where the camera is located in world coordinates).
            Pose is essentially the *inverse* transformation as that defined by Extrinsics.
            Units are converted to meters.
            The matrix assumes column-vectors: (i.e. Matrix * Point versus Point * Matrix).
            The MathNet basis is used:
                   Z (up)
                   |
                   |
                   +----> Y (left)
                  /
                 /
                X (forward).
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationVector">
            <summary>
            Defines a 3D point in our calibration.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationVector.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationVector.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.CalibrationVector.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Calibration.MultiCameraCalibration.SolvedBoard">
            <summary>
            Defines the relative orientation of a solved board.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.SolvedBoard.CornerPositions">
            <summary>
            Gets or sets the position of each board's detected corner points.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.SolvedBoard.Position">
            <summary>
            Gets or sets the board position.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Calibration.MultiCameraCalibration.SolvedBoard.Orientation">
            <summary>
            Gets or sets the board orientation.
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Calibration.ProjectTo3D">
            <summary>
            Component that projects 2D color-space points into 3D camera-space points in the depth camera's coordinate system.
            </summary>
            <remarks>
            Inputs are the depth image, list of 2D points from the color image, and the camera calibration.
            Outputs the 3D points projected into the depth camera's coordinate system.
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ProjectTo3D.#ctor(Microsoft.Psi.Pipeline,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Calibration.ProjectTo3D"/> class.
            </summary>
            <param name="pipeline">The pipeline to add the component to.</param>
            <param name="name">An optional name for the component.</param>
        </member>
        <member name="M:Microsoft.Psi.Calibration.ProjectTo3D.Receive(System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.DepthImage},System.Collections.Generic.List{MathNet.Spatial.Euclidean.Point2D},Microsoft.Psi.Calibration.IDepthDeviceCalibrationInfo},Microsoft.Psi.Envelope)">
            <inheritdoc/>
        </member>
    </members>
</doc>
